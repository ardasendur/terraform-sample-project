image: alpine:latest
stages:
  - lint
  - publish
  - terraform-validate
  - terraform-plan
  - terraform-apply
  - terraform-destroy

variables:
    GITLAB_REGISTRY : registry.gitlab.com
    IMAGE_NAME: "app"
    TAG: ${CI_COMMIT_SHA:0:8}
    TF_VAR_ecr_name: "containerized-app"

before_script:
  - chmod +x run.sh
  - apk update && apk add bash

.terraform-base-image: &terraform-base-image
    image:
        name: hashicorp/terraform:1.0.0
        entrypoint:
            - '/usr/bin/env'
            - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    services:
        - docker:dind
    only:
        refs:
            - master
    when: manual

### Dockerfile lint for containerized app###
0-dockerfile-check:
  stage: lint
  image: hadolint/hadolint:latest-alpine
  before_script:
    - hadolint --version
  script:
    - hadolint containerized-app/Dockerfile
  only:
    refs:
        - master
  when: manual

### Dockerfile build and push gitlab registry for containerized app ###
0-docker-build:
    image: docker:latest
    services:
        - docker:dind
    stage: publish
    script:
        - echo  "${CI_JOB_STAGE} stage for docker image."
        - cd containerized-app
        - docker login -u ${CI_REGISTRY_USER} -p $CI_BUILD_TOKEN ${GITLAB_REGISTRY}
        - docker build -t ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} .
    only:
        refs:
            - master
    when: manual

1-docker-publish:
    image: docker:latest
    services:
        - docker:dind
    stage: publish
    script:
        - echo "${CI_JOB_STAGE} stage for docker image."
        - cd containerized-app
        - docker login -u ${CI_REGISTRY_USER} -p $CI_BUILD_TOKEN ${GITLAB_REGISTRY}
        - echo "Build the image ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} "
        - docker build -t ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} .
        - echo "Tagging image with name ${CI_COMMIT_SHA:0:8}"
        - docker tag ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME}:${CI_COMMIT_SHA:0:8}
        - echo "Push image gitlab container registry."
        - docker push ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME}:${CI_COMMIT_SHA:0:8}
    only:
        refs:
            - master
    when: manual

### Docker image push to from GITLAB registry to AWS ECR for containerized app###
2-ecr-publish:
  image:
    name: amazon/aws-cli
    entrypoint:
      - [""]
  services:
    - docker:dind
  stage: publish
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - docker login -u ${CI_REGISTRY_USER} -p $CI_BUILD_TOKEN ${GITLAB_REGISTRY}
    - docker pull ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME}:${CI_COMMIT_SHA:0:8}
    - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output text ---query Account 2>/dev/null)
    - export ECR_URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
    - export ECR_REPO_NAME=$TF_VAR_ecr_name
    - export ECR_PATH="$ECR_URL/$ECR_REPO_NAME"
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URL
    - docker tag ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME}:${CI_COMMIT_SHA:0:8} ${ECR_PATH}:${CI_COMMIT_SHA:0:8}
    - docker push ${ECR_PATH}:${CI_COMMIT_SHA:0:8}
  only:
    refs:
      - master
  when: manual

#### containerized-app-infra ####
0-validate-containerized-app-infra:
  stage: terraform-validate
  <<: *terraform-base-image
  script:
    - bash run.sh containerized-app validate
0-plan-containerized-app-infra:
  stage: terraform-plan
  <<: *terraform-base-image
  script:
      - bash run.sh containerized-app plan

0-apply-containerized-app-infra:
    stage: terraform-apply
    <<: *terraform-base-image
    script:
      - bash run.sh containerized-app apply

0-destroy-containerized-app-infra:
    stage: terraform-destroy
    <<: *terraform-base-image
    script:
      - bash run.sh containerized-app destroy

#### Serverless-app-infra ####
0-validate-serverless-app-infra:
  stage: terraform-validate
  <<: *terraform-base-image
  script:
    - ./run.sh serverless-app validate
0-plan-serverless-app-infra:
    stage: terraform-plan
    <<: *terraform-base-image
    script:
       - apk add --no-cache python3 py3-pip
       - bash run.sh serverless-app plan

0-apply-serverless-app-infra:
    stage: terraform-apply
    <<: *terraform-base-image
    script:
      - bash run.sh serverless-app apply

0-destroy-serverless-app-infra:
    stage: terraform-destroy
    <<: *terraform-base-image
    script:
      - bash run.sh serverless-app destroy
