image: ubuntu:latest
stages:
  - lint
  - publish
  - terraform-validate
  - terraform-plan
  - terraform-apply
  - terraform-destroy

variables:
    GITLAB_REGISTRY : registry.gitlab.com
    IMAGE_NAME: "app"
    TAG: ${CI_COMMIT_SHA:0:8}

before_script:
  - source ./run.sh && chmod +x ./run.sh
  - bash run.sh

.terraform-base-image: &terraform-base-image
    image:
        name: hashicorp/terraform:0.14.9
        entrypoint:
            - '/usr/bin/env'
            - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    services:
        - docker:dind
    only:
        refs:
            - master
    when: manual

### Dockerfile lint for containerized app###
0-dockerfile-check:
  stage: lint
  image: hadolint/hadolint:latest-alpine
  before_script:
    - hadolint --version
  script:
    - hadolint containerized-app/Dockerfile
  only:
    refs:
        - master
  when: manual

### Dockerfile build and push gitlab registry for containerized app ###
0-docker-build:
    image: docker:latest
    services:
        - docker:dind
    stage: publish
    script:
        - echo  "${CI_JOB_STAGE} stage for docker image."
        - cd containerized-app
        - docker login -u ${CI_REGISTRY_USER} -p $CI_BUILD_TOKEN ${GITLAB_REGISTRY}
        - docker build -t ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} .
    only:
        refs:
            - master
    when: manual

1-docker-publish:
    image: docker:latest
    services:
        - docker:dind
    stage: publish
    script:
        - echo "${CI_JOB_STAGE} stage for docker image."
        - cd containerized-app
        - docker login -u ${CI_REGISTRY_USER} -p $CI_BUILD_TOKEN ${GITLAB_REGISTRY}
        - echo "Build the image ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} "
        - docker build -t ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} .
        - echo "Tagging image with name ${CI_COMMIT_SHA:0:8}"
        - docker tag ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME} ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME}:${CI_COMMIT_SHA:0:8}
        - echo "Push image gitlab container registry."
        - docker push ${GITLAB_REGISTRY}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}/${IMAGE_NAME}:${CI_COMMIT_SHA:0:8}
    only:
        refs:
            - master
    when: manual

### Docker image push to from GITLAB registry to AWS ECR for containerized app###
2-ecr-publish:
    image: docker:latest
    services:
        - docker:dind
    stage: publish
    script:
      - bash run.sh containerized-app ecr-publish
    only:
      refs:
        - master
    when: manual

#### containerized-app-infra ####
0-validate-containerized-app-infra:
  stage: terraform-validate
  <<: *terraform-base-image
  script:
    - bash run.sh containerized-app validate
0-plan-containerized-app-infra:
    stage: terraform-plan
    <<: *terraform-base-image
    script:
       - bash run.sh containerized-app plan

0-apply-containerized-app-infra:
    stage: terraform-apply
    <<: *terraform-base-image
    script:
      - bash run.sh containerized-app apply

0-destroy-containerized-app-infra:
    stage: terraform-destroy
    <<: *terraform-base-image
    script:
      - bash run.sh containerized-app destroy

#### Serverless-app-infra ####
0-validate-serverless-app-infra:
  stage: terraform-validate
  <<: *terraform-base-image
  script:
    - bash run.sh serverless-app validate
0-plan-serverless-app-infra:
    stage: terraform-plan
    <<: *terraform-base-image
    script:
       - bash run.sh serverless-app plan

0-apply-serverless-app-infra:
    stage: terraform-apply
    <<: *terraform-base-image
    script:
      - bash run.sh serverless-app apply

0-destroy-serverless-app-infra:
    stage: terraform-destroy
    <<: *terraform-base-image
    script:
      - bash run.sh serverless-app destroy
